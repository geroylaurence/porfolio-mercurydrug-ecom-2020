// need to review for removal;
const COMPUTE_CART_SUB_TOTAL = 'COMPUTE_CART_SUB_TOTAL';
const COMPUTE_ITEM_TOTAL_PRICE = 'COMPUTE_ITEM_TOTAL_PRICE';

const COMPUTE_GRANDTOTAL_DELIVERYFEE = 'COMPUTE_GRANDTOTAL_DELIVERYFEE';
const COMPUTE_SET_PAYMENT_SUMMARY = 'COMPUTE_SET_PAYMENT_SUMMARY';

const ADD_ITEM_CART_LOADING = 'ADD_ITEM_CART_LOADING';
const ADD_ITEM_CART_SUCCESS = 'ADD_ITEM_CART_SUCCESS';
const ADD_ITEM_CART_ERROR = 'ADD_ITEM_CART_ERROR';

const CART_UPDATE_ITEM_QUANTITY_LOADING = 'CART_UPDATE_ITEM_QUANTITY_LOADING'; 
const CART_UPDATE_ITEM_QUANTITY_SUCCESS = 'CART_UPDATE_ITEM_QUANTITY_SUCCESS'; 
const CART_UPDATE_ITEM_QUANTITY_ERROR = 'CART_UPDATE_ITEM_QUANTITY_ERROR'; 

const CART_DELETE_ITEM_LOADING = 'CART_DELETE_ITEM_LOADING';
const CART_DELETE_ITEM_SUCCESS = 'CART_DELETE_ITEM_SUCCESS';
const CART_DELETE_ITEM_ERROR = 'CART_DELETE_ITEM_ERROR';

const SET_CART_ITEM_COUNT = 'SET_CART_ITEM_COUNT';
const SET_CART_ITEM_COUNT_FROM_GUEST_TO_LOGIN = 'SET_CART_ITEM_COUNT_FROM_GUEST_TO_LOGIN';

const CART_ITEMS_COUNT_LOADING = 'CART_ITEMS_COUNT_LOADING';
const CART_ITEMS_COUNT_SUCCESS = 'CART_ITEMS_COUNT_SUCCESS';
const CART_ITEMS_COUNT_ERROR = 'CART_ITEMS_COUNT_ERROR';

const CART_GET_ITEMS_LOADING = 'CART_GET_ITEMS_LOADING';
const CART_GET_ITEMS_SUCCESS = 'CART_GET_ITEMS_SUCCESS';
const CART_GET_ITEMS_ERROR = 'CART_GET_ITEMS_ERROR';

const GUEST_USER_SET_CART_ITEM = 'GUEST_USER_SET_CART_ITEM';
const GUEST_USER_SET_CART_ITEM_FROM_LOCAL_STORAGE = 'GUEST_USER_SET_CART_ITEM_FROM_LOCAL_STORAGE';
const GUEST_USER_UPDATE_CART_ITEM_FROM_LOCAL_STORAGE = 'GUEST_USER_UPDATE_CART_ITEM_FROM_LOCAL_STORAGE';
const GUEST_USER_DELETE_CART_ITEM_FROM_LOCAL_STORAGE = 'GUEST_USER_DELETE_CART_ITEM_FROM_LOCAL_STORAGE';
const GUEST_USER_CLEAR_CART_ITEMS = 'GUEST_USER_CLEAR_CART_ITEMS';

import { decimalPresentable } from '../../client/utils/helper';

function cartItemListMapping(item) {
  let itemProduct = {};
  const [image] = item.images;

  itemProduct = {
    ...itemProduct,
    id: item.id,
    name: item.name,
    image: image.path,
    isRxFlag: item.isRxFlag,

    quantity: item.quantity,
    unitPrice: parseFloat(item.price),
    unitPricePresentable: decimalPresentable(parseFloat(item.price).toFixed(2)),
  };

  return itemProduct;
}

export {
  COMPUTE_CART_SUB_TOTAL,
  COMPUTE_ITEM_TOTAL_PRICE,

  COMPUTE_GRANDTOTAL_DELIVERYFEE,
  COMPUTE_SET_PAYMENT_SUMMARY,

  ADD_ITEM_CART_LOADING,
  ADD_ITEM_CART_SUCCESS,
  ADD_ITEM_CART_ERROR,

  CART_UPDATE_ITEM_QUANTITY_LOADING,
  CART_UPDATE_ITEM_QUANTITY_SUCCESS,
  CART_UPDATE_ITEM_QUANTITY_ERROR,

  CART_DELETE_ITEM_LOADING,
  CART_DELETE_ITEM_SUCCESS,
  CART_DELETE_ITEM_ERROR,

  SET_CART_ITEM_COUNT,
  SET_CART_ITEM_COUNT_FROM_GUEST_TO_LOGIN,
  CART_ITEMS_COUNT_LOADING,
  CART_ITEMS_COUNT_SUCCESS,
  CART_ITEMS_COUNT_ERROR,

  CART_GET_ITEMS_LOADING,
  CART_GET_ITEMS_SUCCESS,
  CART_GET_ITEMS_ERROR,

  GUEST_USER_SET_CART_ITEM,
  GUEST_USER_SET_CART_ITEM_FROM_LOCAL_STORAGE,
  GUEST_USER_UPDATE_CART_ITEM_FROM_LOCAL_STORAGE,
  GUEST_USER_DELETE_CART_ITEM_FROM_LOCAL_STORAGE,
  GUEST_USER_CLEAR_CART_ITEMS,

  cartItemListMapping,
};